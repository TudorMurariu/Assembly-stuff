     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;    0000 0000 0000 0000
    14 00000000 5ECA                        A dw 1100101001011110b ; = CA5Eh
    15 00000002 9076                        B dw 0111011010010000b ; = 7690h
    16 00000004 <res 00000004>              C resd 1 
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 66A1[00000000]                  mov ax , [A] ; ax = A = CA5Eh
    23 00000006 662500F8                        and ax , 1111100000000000b ; ax = 1100100000000000b = C800h
    24 0000000A 66C1E80B                        shr ax , 11 ; ax = 01 1001b = 19h
    25 0000000E 98                              cwde        ; eax = ax = 01 1001b = 19h
    26 0000000F BB00000000                      mov ebx , 0 ; ebx = 0h
    27 00000014 09C3                            or ebx , eax;ebx = 01 1001b = 19h
    28                                          
    29 00000016 81CBE00F0000                    or ebx , 0111111100000b ; eax = 0 1111 1111 1001b = 0FF9h
    30                                          
    31 0000001C 66A1[02000000]                  mov ax , [B] ; ax = b = 7690h = 0111011010010000b 
    32 00000022 6625000F                        and ax ,0111100000000b  ; ax = 0110 0000 0000b = 0600h
    33 00000026 98                              cwde         ; eax = ax = 0110 0000 0000b = 0600h
    34 00000027 C1E004                          shl eax , 4  ; eax = 0110 0000 0000 0000b = 06000h
    35 0000002A 09C3                            or ebx , eax ; ebx = 0110 1111 1111 1001b = 06FF9h
    36                                          
    37 0000002C 66A1[00000000]                  mov ax , [A] ; ax = A = CA5Eh
    38 00000032 98                              cwde         ; eax = ax = A = FFFFCA5Eh
    39 00000033 C1E010                          shl eax , 16 ; eax = CA5E0000h
    40 00000036 09C3                            or ebx , eax ; ebx =  CA5E 6FF9h
    41                                          
    42 00000038 891D[04000000]                  mov dword[C] , ebx ; C = ebx = CA5E 6FF9h
    43 0000003E A1[04000000]                    mov eax , [C]
    44                                          ; exit(0)
    45 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
