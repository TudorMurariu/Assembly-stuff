     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit,fopen,fclose,fprintf,scanf,printf            
     6                                  import exit msvcrt.dll    
     7                                  import fopen msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 6F75747075742E7478-         nume_fisier db "output.txt",0
    15 00000009 7400               
    16 0000000B 7700                        mod_acces db "w",0
    17 0000000D FFFFFFFF                    descriptor_fis dd -1
    18 00000011 256400                      format_citire db "%d",0
    19 00000014 25642000                    format_afisare db "%d ",0
    20 00000018 <res 00000004>              n resd 1
    21 0000001C <res 00000004>              x resd 1
    22 00000020 00000000                    suma dd 0
    23                                  
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;fopen(nume_fisier,mod_aces) -> in eax desc_dis
    28 00000000 68[0B000000]                    push dword mod_acces
    29 00000005 68[00000000]                    push dword nume_fisier
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp , 4*2
    32                                          
    33 00000013 83F800                          cmp eax,0 
    34 00000016 0F8495000000                        je final
    35                                              
    36 0000001C A3[0D000000]                    mov [descriptor_fis] , eax
    37                                          
    38                                          ;scanf(format,&n)
    39 00000021 68[18000000]                    push dword n
    40 00000026 68[11000000]                    push dword format_citire
    41 0000002B FF15[00000000]                  call [scanf]
    42 00000031 83C408                          add esp , 4*2
    43                                          
    44 00000034 8B0D[18000000]                  mov ecx , [n]
    45                                          
    46                                          loop1:
    47 0000003A 51                                  push ecx
    48                                              
    49                                              ;scanf(format,&x)
    50 0000003B 68[1C000000]                        push dword x
    51 00000040 68[11000000]                        push dword format_citire
    52 00000045 FF15[00000000]                      call [scanf]
    53 0000004B 83C408                              add esp , 4*2
    54                                              
    55                                              
    56 0000004E 8B1D[1C000000]                      mov ebx , [x]
    57                                              ; verificam daca x este intre -99 si -111111
    58 00000054 83FB9D                              cmp ebx , -99
    59 00000057 7F32                                    jg continue
    60 00000059 81FBF94DFEFF                        cmp ebx , -111111
    61 0000005F 7C2A                                    jl continue
    62                                              
    63 00000061 89DA                                mov edx , ebx
    64                                              ; verificam bitii numarului citit pentru a vedea daca e div cu 4
    65 00000063 83E203                              and edx , 011b
    66 00000066 83FA00                              cmp edx , 0b
    67 00000069 7520                                    jne continue
    68                                              ;else
    69                                                  
    70 0000006B 011D[20000000]                          add dword[suma] , ebx
    71                                              
    72                                                  
    73                                                  ; fprintf(descriptor_fis , format , x)
    74 00000071 FF35[1C000000]                          push dword [x]
    75 00000077 68[14000000]                            push dword format_afisare
    76 0000007C FF35[0D000000]                          push dword [descriptor_fis]
    77 00000082 FF15[00000000]                          call [fprintf]
    78 00000088 83C40C                                  add esp , 4*3
    79                                                  
    80                                              continue:
    81                                                  
    82 0000008B 59                                  pop ecx
    83 0000008C E2AC                            loop loop1
    84                                          
    85 0000008E FF35[20000000]                  push dword [suma]
    86 00000094 68[14000000]                    push dword format_afisare
    87 00000099 FF15[00000000]                  call [printf]
    88 0000009F 83C408                          add esp , 4*2
    89                                          
    90                                          ; fclose(descriptor_fis)
    91 000000A2 FF35[0D000000]                  push dword [descriptor_fis]
    92 000000A8 FF15[00000000]                  call [fclose]
    93 000000AE 83C404                          add esp , 4
    94                                          
    95                                          final:
    96                                          ; exit(0)
    97 000000B1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    98 000000B3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
