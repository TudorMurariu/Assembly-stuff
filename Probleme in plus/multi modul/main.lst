     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, scanf, printf, gets               
     6                                  import exit msvcrt.dll    
     7                                  import scanf msvcrt.dll  
     8                                  import printf msvcrt.dll    
     9                                  import gets msvcrt.dll      
    10                                  
    11                                  extern citire, afisare             
    12                                  ;; Se citeste o propozitie de la tastatura. Sa se numere literele din fiecare cuvant si sa se afiseze aceste numere pe  ;; ecran.
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 25642000                    format db "%d ",0
    16 00000004 25730A00                    format_string db "%s",10,0
    17 00000008 00<rept>                    text times 100 db 0
    18 0000006C 00000000                    nr dd 0
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          
    23 00000000 68[08000000]                    push dword text
    24 00000005 E8(00000000)                    call citire
    25 0000000A 83C404                          add esp , 4
    26                                          
    27                                          
    28 0000000D BE[08000000]                    mov esi , text
    29                                          loop1:
    30                                              
    31 00000012 AC                                  lodsb ; al = [esi] , esi++
    32 00000013 3C00                                cmp al , 0
    33 00000015 742F                                    je out1
    34 00000017 3C0A                                cmp al , 10
    35 00000019 742B                                    je out1
    36 0000001B 3C20                                cmp al , ' '
    37 0000001D 7408                                    je afis
    38                                              ;; else
    39 0000001F FF05[6C000000]                          inc dword[nr]
    40 00000025 EB1D                                    jmp continue
    41                                              afis:
    42 00000027 FF35[6C000000]                          push dword [nr]
    43 0000002D 68[00000000]                            push dword format
    44 00000032 E8(00000000)                            call afisare
    45 00000037 83C408                                  add esp , 4*2
    46 0000003A C705[6C000000]0000-                     mov dword[nr] , 0
    46 00000042 0000               
    47                                              continue:
    48 00000044 EBCC                            jmp loop1
    49                                          out1:
    50                                          
    51 00000046 833D[6C000000]00                cmp dword[nr] , 0
    52 0000004D 7413                                je ext
    53                                          ;;else
    54 0000004F FF35[6C000000]                      push dword [nr]
    55 00000055 68[00000000]                        push dword format
    56 0000005A E8(00000000)                        call afisare
    57 0000005F 83C408                              add esp , 4*2
    58                                          
    59                                          ext:
    60                                          ; exit(0)
    61 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    63                                          
    64                                          
    65                                      
    66                                      
