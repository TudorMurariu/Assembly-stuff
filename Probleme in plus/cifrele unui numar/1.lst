     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf,scanf              
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll 
    10                                  import scanf msvcrt.dll    
    11                                  
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 7B000000                    n dd 123
    15 00000004 00000000                    aux dd 0
    16 00000008 25640A00                    format_afis db "%d",10,0
    17 0000000C 256400                      format_citire db "%d",0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 68[00000000]                    push dword n
    24 00000005 68[0C000000]                    push dword format_citire
    25 0000000A FF15[00000000]                  call [scanf]
    26 00000010 83C408                          add esp, 4 * 2 
    27                                          
    28 00000013 FF35[00000000]                  push dword [n]
    29 00000019 68[08000000]                    push dword format_afis
    30 0000001E FF15[00000000]                  call [printf]
    31 00000024 83C408                          add esp, 4 * 2 
    32                                          
    33                                          
    34 00000027 A1[00000000]                    mov eax, [n]
    35                                          
    36                                          loop1:
    37 0000002C 83F800                              cmp eax , 0
    38 0000002F 7453                                je out1
    39 00000031 83F80A                              cmp eax , 10
    40 00000034 7236                                jb afis2
    41                                              
    42 00000036 BA00000000                          mov edx , 0
    43 0000003B 50                                  push eax 
    44 0000003C 6658                                pop ax
    45 0000003E 665A                                pop dx
    46                                              
    47 00000040 66BB0A00                            mov bx , 10
    48 00000044 66F7F3                              div bx
    49                                              
    50 00000047 BB00000000                          mov ebx , 0
    51 0000004C 6689C3                              mov bx , ax
    52 0000004F B800000000                          mov eax , 0
    53 00000054 89D8                                mov eax , ebx
    54 00000056 A3[04000000]                        mov [aux] , eax
    55                                              
    56 0000005B 52                                  push dword edx
    57 0000005C 68[08000000]                        push dword format_afis
    58 00000061 FF15[00000000]                      call [printf]
    59 00000067 83C408                              add esp, 4 * 2 
    60 0000006A EB11                                jmp continue
    61                                              afis2:
    62                                              
    63 0000006C 50                                  push dword eax
    64 0000006D 68[08000000]                        push dword format_afis
    65 00000072 FF15[00000000]                      call [printf]
    66 00000078 83C408                              add esp, 4 * 2 
    67 0000007B EB07                                jmp out1
    68                                              continue:
    69 0000007D A1[04000000]                        mov eax , [aux]
    70                                          
    71 00000082 EBA8                            jmp loop1
    72                                          out1:
    73                                      
    74                                          ; exit(0)
    75 00000084 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000086 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
