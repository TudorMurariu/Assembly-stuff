     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf             
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    
    10                                  import scanf msvcrt.dll    
    11                                  
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0102030405                  S db 1, 2, 3, 4, 5
    15                                      l equ $-S 
    16 00000005 0000<rept>                  D times l-1 dw 0
    17 0000000D 25642000                    format db "%d ",0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 BE[00000000]                    mov esi , S
    24 00000005 BF[05000000]                    mov edi , D
    25 0000000A B900000000                      mov ecx , 0
    26                                          
    27 0000000F AC                              lodsb ;al = esi , inc esi
    28 00000010 88C3                            mov bl , al
    29                                          
    30                                          loop1:
    31 00000012 83F904                              cmp ecx , l-1
    32 00000015 740C                                je out1
    33                                              
    34 00000017 AC                                  lodsb ;al = [esi] , inc esi
    35 00000018 88C2                                mov dl , al
    36 0000001A F6E3                                mul bl ; ax = al*bl
    37 0000001C 66AB                                stosw ; [edi] = ax  edi+=2
    38                                              
    39 0000001E 88D3                                mov bl , dl
    40                                              
    41 00000020 41                                  inc ecx
    42 00000021 EBEF                            jmp loop1
    43                                          out1:
    44                                          
    45 00000023 BE[05000000]                    mov esi , D
    46 00000028 B900000000                      mov ecx , 0
    47                                          
    48                                          loop_afis:
    49 0000002D 83F904                              cmp ecx , l-1
    50 00000030 741D                                je out2
    51                                              
    52 00000032 B800000000                          mov eax , 0
    53 00000037 66AD                                lodsw ; ax = [esi] esi+=2
    54                                              
    55 00000039 51                                  push ecx
    56 0000003A 56                                  push esi
    57                                              
    58 0000003B 50                                  push dword eax
    59 0000003C 68[0D000000]                        push dword format
    60 00000041 FF15[00000000]                      call [printf]
    61 00000047 83C408                              add esp,4*2
    62                                              
    63 0000004A 5E                                  pop esi
    64 0000004B 59                                  pop ecx
    65                                              
    66 0000004C 41                                  inc ecx
    67 0000004D EBDE                            jmp loop_afis
    68                                          out2:
    69                                          
    70                                          ; exit(0)
    71 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
