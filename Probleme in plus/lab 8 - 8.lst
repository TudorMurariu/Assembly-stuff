     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ;Se da un numar natural a (a: dword, definit in segmentul de date). Sa se citeasca un numar natural b si sa se ;calculeze: a + a/b. Sa se afiseze rezultatul operatiei. Valorile vor fi afisate in format decimal (baza
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 <res 00000004>              a resd 1
    17 00000004 <res 00000004>              b resd 1
    18 00000008 <res 00000004>              sum resd 1
    19 0000000C 256400                      format db "%d",0
    20 0000000F 61203D2000                  citire_a db "a = ",0
    21 00000014 62203D2000                  citire_b db "b = ",0
    22 00000019 202B2000                    plus db " + ",0
    23 0000001D 203D2000                    egal db " = ",0
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[0F000000]                    push dword citire_a
    29 00000005 FF15[00000000]                  call [printf]
    30                                          
    31                                          ;scanf("%d",&a)
    32 0000000B 68[00000000]                    push dword a
    33 00000010 68[0C000000]                    push dword format
    34 00000015 FF15[00000000]                  call [scanf]
    35                                          
    36 0000001B 68[14000000]                    push dword citire_b
    37 00000020 FF15[00000000]                  call [printf]
    38                                          
    39 00000026 68[04000000]                    push dword b
    40 0000002B 68[0C000000]                    push dword format
    41 00000030 FF15[00000000]                  call [scanf]
    42                                          
    43 00000036 BA00000000                      mov edx , 0
    44 0000003B A1[00000000]                    mov eax , [a]
    45 00000040 A3[08000000]                    mov dword[sum] , eax
    46 00000045 F73D[04000000]                  idiv dword[b] ; eax = edx:eax/b si edx = edx:eax%b
    47 0000004B 0105[08000000]                  add dword[sum] , eax
    48                                          
    49 00000051 A3[04000000]                    mov [b] , eax
    50                                          
    51 00000056 FF35[00000000]                  push dword [a]
    52 0000005C 68[0C000000]                    push dword format
    53 00000061 FF15[00000000]                  call [printf]
    54                                  
    55 00000067 68[19000000]                    push dword plus  
    56 0000006C FF15[00000000]                  call [printf]
    57                                          
    58 00000072 A1[04000000]                    mov eax , [b]
    59 00000077 50                              push dword eax
    60 00000078 68[0C000000]                    push dword format
    61 0000007D FF15[00000000]                  call [printf]
    62                                          
    63 00000083 68[1D000000]                    push dword egal
    64 00000088 FF15[00000000]                  call [printf]
    65                                          
    66 0000008E FF35[08000000]                  push dword [sum]
    67 00000094 68[0C000000]                    push dword format
    68 00000099 FF15[00000000]                  call [printf]
    69                                          
    70                                          ; exit(0)
    71 0000009F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 000000A1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
